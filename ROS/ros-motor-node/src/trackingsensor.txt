#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <ros/ros.h>
#include <sensor_msgs/Range.h> //change to hunt msg
#include <wiringPi.h>

using namespace std;

namespace ky_033_node {

const static float sensorValue= 0;

class Hunt {
 public:
  Hunt(int s) : signal_(s) {
    pinMode(signal_, OUTPUT);
    delay(1000);
}

int main(int argc, char **argv) {

  // Start ROS node.
  ROS_INFO("Starting node");
  ros::init(argc, argv, "ky_033");
  ros::NodeHandle node;
  ros::Rate rate(10);  // 10 hz

  // Build N ky_033.
  wiringPiSetupSys();  // uses gpio pin numbering
  // TODO: config these
  vector<ky_033_node::Hunt> hunts;
  hunts.push_back(ky_033_node::Hunt(5));
  hunts.push_back(ky_033_node::Hunt(6));

  // Build a publisher for each Hunt sensor.
  vector<ros::Publisher> hunt_pubs;
  for (int i = 0; i < hunts.size(); ++i) {
    stringstream ss;
    ss << "hunt_" << i;
    hunt_pubs.push_back(node.advertise<sensor_msgs::Range>(ss.str(), 10)); //replace sensor_msgs::Range for costum msg
  }
  
  // Build base range message that will be used for
  // each time a msg is published.
  sensor_msgs::Range range; //replace for Hunt
  range.max_range = hc_sr04_node::MAX_DISTANCE; //replace for Hunt
 
  float distance;
  bool error;
  while(ros::ok()) {    
    for (int i = 0; i < hunts.size(); ++i) {
      range.header.stamp = ros::Time::now(); //header Hunt
      hunt_pubs[i].publish(range);
    }
    ros::spinOnce();
    rate.sleep();    
  }
  return 0;
}